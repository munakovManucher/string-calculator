package First;

import java.util.Scanner; //импортировали скан

public class FirstCalculator { // создали основной класс калькулятора
    public static void main(String[] args) { //точка входа мейн
        Scanner sc = new Scanner(System.in);// считываем строку (класс Сканнер)
        String input = sc.nextLine(); //дали назначение переменной, которая будет считывать целую строку
        String[] parts = input.split(" "); //создаём неявный массив с методом разделителя с параметрами пробела
        if (parts.length != 3) { //условие при котором калькулятор будет работать, длина массива должна быть равна
            // трем элементам, если не три, то выброси ошибку
            throw new RuntimeException("должен состоять из двух выражений и оператора");//если не три, то выброси ошибку
        }
        String firstOperand = parts[0];//забронили индекс 0 массива для первого операнда
        String operator = parts[1];//забронили элемент под индексом 1, для +-/*
        String secondOperand = parts[2];//забронили индекс 2 для второго операнда

        //работа с первым операндом
        if (firstOperand.startsWith("\"") && firstOperand.endsWith("\"")) {//Начинаем понемногу работать с первым
            // операндом, задаём условия, что первый операнд должен начаться с кавычки, кавычка это регулярное
            // выражение, а следовательно перед ней используется обратный слэш, " далее пишем логический оператор И,
            // первый операнд должен закончиться кавычкой, при одновременном соблюдении этих двух условий программа
            // продолжит проверку следующего условия If
            if (firstOperand.length() > 12) { // здесь проверяется что длина первой строки должна быть равна 12, 12-2
                // две кавычки, то есть 10 символам.
                throw new RuntimeException("длина строки не должна превышать 10 символов");//иначе выброси ошибку,
                // если больше 12 символов.
            }
        } else { //если мы ввели что - то другое, без кавычек или нарушили длину строки, сработает иначе
            throw new RuntimeException("первый операнд должен быть строкой с кавычками"); //выбросит ошибку
        }
/*размышления над работой первого операнда, а ничего страшного, что мы не использовали
        if (!firstOperand.startsWith("\"")||!firstOperand.endsWith("\""){
        throw new RuntimeExeption ("строка должна быть в кавычках) или наш случай заработает точно так же? в случае с
         &&, почему можно писать через && в чём тут принципиальная разница? или результат одинаков будет
        */

        //работа со вторым операндом
        if (secondOperand.startsWith("\"") && secondOperand.endsWith("\"")) { //говорим что, если начинает и
            // заканчивает с кавычкой
            if (secondOperand.length() > 12) { //обозначаем длину строки, если больше 12
                throw new RuntimeException("длина строки должна быть не более 10 символов");
            }
        } else { //иначе
            try {//иначе включай механизм обработки ошибок (попробуй,если нет, то поймай), попробуй сначала
                int num = Integer.parseInt(secondOperand);//взять новую переменную, и превратить строку в число, то
                // есть если строка не введена правильно или введена без кавычек, то преврати её в число, правильно
                // понимаю?
                if (num >= 1 && num <= 10) {//далее смотрЮ чтобы число было от 1 до 10 включительно
                } else {//иначе
                    throw new RuntimeException("число должно быть от 1 до 10");//иначе если получилось все же число,
                    // но вышло за пределы ограничений выдай ошибку.
                }
            } catch (NumberFormatException e) {//если же ввели к примеру не числа и не строку, то сработает catch
                throw new RuntimeException("второй операнд должен быть строкой в кавычках (не более 10 символов) " + "или числом от 1 до 10");//выброси ошибку.
            }

            //размышления по поводу написанного куска кода со вторым операндом, почему тут правильно использовать
            // трай кетч после того как пользователь не ввёл строку с кавычками, а что если он не ввёл строку, но без
            // кавычек, не забыли ли мы здесь обработать этот момент? Если он введет символ, то сработает catch
            // скорее всего?
        }
        //работа с оператором

        String result = "";// создаём строковую перемену для результата вычислений

        if (operator.equals("+")) {// через условный оператор if даём команду, если оператор равен +
            result = firstOperand.substring(1, firstOperand.length() - 1) + secondOperand.substring(1, secondOperand.length() - 1);//то результатом присвоения значения result будет, конкатенация первого
            // оператора со вторым, при условии, что с помощью метода строки сабстринг первый операнд будет
            // начинаться с 1 индекса (то есть после кавычки), а заканчиваться будет длина строки (оканчивается
            // кавычкой) - 1, то есть выражение без кавычки, то же самое делаем для второго операнда.
            result = "\"" + result + "\"";//переопределяем результат, с помощью экранирования регулярных символов, для
            // этого используем обратный слеш, нужный символ конкатенация с нашим результатом.
            if (result.length() > 40) {//если длина преобразованного (обрезанного результата) больше 40
                result = result.substring(0, 40) + "...";//то новый результат равен, обрезанный результат (первый
                // индекс(нулевой, так как первую кавычку необходимо сохранить) + 40 + многоточие
            }
        } else if (operator.equals("-")) {
            result = firstOperand.substring(1, firstOperand.length() - 1).replace(secondOperand.substring(1, secondOperand.length() - 1), "");
            result = "\"" + result + "\"";
            if (result.length() > 40) {//если длина преобразованного (обрезанного результата) больше 40
                result = result.substring(0, 40) + "...";//то новый результат равен, обрезанный результат (первый
                // индекс(нулевой, так как первую кавычку необходимо сохранить) + 40 + многоточие
            }
        } else if (operator.equals("*")) {
            int secondOperandNum = Integer.parseInt(secondOperand);//преобразовываем второй операнд в число,
            // поскольку нам нужно будет использовать его в качестве аргумента на которое потребуется умножить n-ое
            // кол-во раз
            result = firstOperand.substring(1, firstOperand.length() - 1).repeat(secondOperandNum);//используем метод
            // строки repeat (на то количество раз, которое введет пользователь при умножении).
            result = "\"" + result + "\"";
            if (result.length() > 40) {
                result = result.substring(0, 40) + "...";
            }

        } else if (operator.equals("/")) {
            int secondOperandNum = Integer.parseInt(secondOperand);
            String firstOperandWithoutQuotes = firstOperand.substring(1,firstOperand.length()-1);//удаляем кавычки
            int resultForInt = firstOperandWithoutQuotes.length()/secondOperandNum;//производим вычисления с длиной
            // строки и вторым операндом
            result = firstOperandWithoutQuotes.substring(0, resultForInt);
            result = "\"" + result + "\"";
            if (result.length() > 40) {
                result = result.substring(0, 40) + "...";
            }
        }

        System.out.println(result);

    }
}
